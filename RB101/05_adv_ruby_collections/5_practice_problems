1.
arr = ['10', '11', '9', '7', '8']

arr.sort do | a,b |
    b.to_i <=> a.to_i
end

# => ["11", "10", "9", "8", "7"]

2.
books = [
  {title: 'One Hundred Years of Solitude', author: 'Gabriel Garcia Marquez', published: '1967'},
  {title: 'The Great Gatsby', author: 'F. Scott Fitzgerald', published: '1925'},
  {title: 'War and Peace', author: 'Leo Tolstoy', published: '1869'},
  {title: 'Ulysses', author: 'James Joyce', published: '1922'}
]

- Order array of hashes based on the year of publication from earliest to latest

books.sort_by do | book |
  book[:published]
end

 => 
[{:title=>"War and Peace", :author=>"Leo Tolstoy", :published=>"1869"},
 {:title=>"Ulysses", :author=>"James Joyce", :published=>"1922"},
 {:title=>"The Great Gatsby",
  :author=>"F. Scott Fitzgerald",
  :published=>"1925"},
 {:title=>"One Hundred Years of Solitude",
  :author=>"Gabriel Garcia Marquez",
  :published=>"1967"}] 

3.
arr1 = ['a', 'b', ['c', ['d', 'e', 'f', 'g']]]
arr1[2][1][3]

arr2 = [{first: ['a', 'b', 'c'], second: ['d', 'e', 'f']}, {third: ['g', 'h', 'i']}]
arr2[1][:third][0]

arr3 = [['abc'], ['def'], {third: ['ghi']}]
arr3[2][:third][0][0]

hsh1 = {'a' => ['d', 'e'], 'b' => ['f', 'g'], 'c' => ['h', 'i']}
hsh1['b'][1]

hsh2 = {first: {'d' => 3}, second: {'e' => 2, 'f' => 1}, third: {'g' => 0}}
hsh2[:third].key(0)

4.
arr1 = [1, [2, 3], 4]
arr1[1][1] = 4

arr2 = [{a: 1}, {b: 2, c: [7, 6, 5], d: 4}, 3]
arr2[2] = 4

hsh1 = {first: [1, 2, [3]]}
hsh1[:first][2] = [4]
 => {:first=>[1, 2, [4]]}

hsh2 = {['a'] => {a: ['1', :two, 3], b: 4}, 'b' => 5}
hsh2[['a']][:a][2] = 4
 => {["a"]=>{:a=>["1", :two, 4], :b=>4}, "b"=>5}

5.
munsters = {
  "Herman" => { "age" => 32, "gender" => "male" },
  "Lily" => { "age" => 30, "gender" => "female" },
  "Grandpa" => { "age" => 402, "gender" => "male" },
  "Eddie" => { "age" => 10, "gender" => "male" },
  "Marilyn" => { "age" => 23, "gender" => "female"}
}
- sum of ages where gender = male

total_males_age = 0
munsters.each_value do |details|
    total_males_age += details["age"] if details["gender"] == "male"
end

total_males_age # => 444

6.
munsters = {
  "Herman" => { "age" => 32, "gender" => "male" },
  "Lily" => { "age" => 30, "gender" => "female" },
  "Grandpa" => { "age" => 402, "gender" => "male" },
  "Eddie" => { "age" => 10, "gender" => "male" },
  "Marilyn" => { "age" => 23, "gender" => "female"}
}

- print out the name, age and gender of each family member

munsters.each do | name, details |
  puts "#{name} is a #{details["age"]}-year-old #{details["gender"]}"
end

Herman is a 32-year-old male
Lily is a 30-year-old female
Grandpa is a 402-year-old male
Eddie is a 10-year-old male
Marilyn is a 23-year-old female

7.
a = 2
b = [5, 8]
arr = [a, b]

# => arr = [2, [5, 8]]

arr[0] += 2
=> 4

arr[1][0] -= a
# => 5 - 2
=> 3

a # => 2
b # => [3, 8]

# value of `a` doesn't change as `a` is not referenced, and `arr[0] += 2` is modifying the array `arr` not `a`.
# `b` does change as we are modifying an element in the array that is referenced by 'b'

8.
hsh = {first: ['the', 'quick'], second: ['brown', 'fox'], third: ['jumped'], fourth: ['over', 'the', 'lazy', 'dog']}

vowels = "aeiou"
hsh.each do | _, strings |
  strings.each do | str |
    str.chars.each do | char |
      puts char if vowels.include?(char)
    end
  end
end

9.
arr = [['b', 'c', 'a'], [2, 1, 3], ['blue', 'black', 'green']]

arr.map do | sub_arr |
  sub_arr.sort do |a, b|
    b <=> a
  end
end

# => [["c", "b", "a"], [3, 2, 1], ["green", "blue", "black"]]

10.
arr = [{a: 1}, {b: 2, c: 3}, {d: 4, e: 5, f: 6}]

arr.map do | hsh |
  increm_hsh = {}
  hsh.each do | key, value|
    increm_hsh[key] = value + 1
  end
  increm_hsh
end

# => [{:a=>2}, {:b=>3, :c=>4}, {:d=>5, :e=>6, :f=>7}]

11.
arr = [[2], [3, 5, 7], [9], [11, 13, 15]]

arr.map do | el |
  el.select do |num|
    num%3 == 0
  end
end

# => [[], [3], [9], [15]]

12.
arr = [[:a, 1], ['b', 'two'], ['sea', {c: 3}], [{a: 1, b: 2, c: 3, d: 4}, 'D']]
# expected return value: {:a=>1, "b"=>"two", "sea"=>{:c=>3}, {:a=>1, :b=>2, :c=>3, :d=>4}=>"D"}

hsh = {}
arr.each do |item|
  hsh[item[0]] = item[1]
end

hsh # => {:a=>1, "b"=>"two", "sea"=>{:c=>3}, {:a=>1, :b=>2, :c=>3, :d=>4}=>"D"}

13.
arr = [[1, 6, 7], [1, 4, 9], [1, 8, 3]]

arr.sort_by do |sub_array|
  sub_array.select do |num|
    num.odd?
  end
end

#  => [[1, 8, 3], [1, 6, 7], [1, 4, 9]]

# select makes sure only the odd numbers are available for comparison

14.
hsh = {
  'grape' => {type: 'fruit', colors: ['red', 'green'], size: 'small'},
  'carrot' => {type: 'vegetable', colors: ['orange'], size: 'medium'},
  'apple' => {type: 'fruit', colors: ['red', 'green'], size: 'medium'},
  'apricot' => {type: 'fruit', colors: ['orange'], size: 'medium'},
  'marrow' => {type: 'vegetable', colors: ['green'], size: 'large'},
}

hsh.each_with_object([]) do |(key, details), array|
  if details[:type] == 'fruit'
    colors = details[:colors].map do |color|
      color.capitalize
    end
    array << colors
  elsif details[:type] == 'vegetable'
   array << details[:size].upcase
  end
end

# => [["Red", "Green"], "MEDIUM", ["Red", "Green"], ["Orange"], "LARGE"] 

15.
arr = [{a: [1, 2, 3]}, {b: [2, 4, 6], c: [3, 6], d: [4]}, {e: [8], f: [6, 10]}]

arr.select do | hsh |
  hsh.all? do | _, value |
    value.all? do |num|
      num.even?
    end
  end
end

# => [{:e=>[8], :f=>[6, 10]}]

16.
def generate_uuid
  characters = []
  (0..9).each { |el| characters << el.to_s }
  ('a'..'f').each { |el| characters << el }

  uuid = ""
  sections = [8, 4, 4, 4, 12]
  sections.each_with_index do |section, index|
    section.times { uuid += characters.sample }
    uuid += '-' unless index >= sections.size - 1
  end
  uuid
end
